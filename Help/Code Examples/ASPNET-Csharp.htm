<html>
<head>
<title>ASP.NET (C#)</title>
<style>
p,body,a,tr,td
             { font-family: Verdana, Arial, Helvetica; font-size: 10pt }
h1,h2,h3,h4,h5,h6
             { font-family: Verdana, Arial, Helvetica; font-weight: normal; font-style: normal; }
h1           { font-size: 20pt }
h2           { font-size: 18pt; font-weight:bold; color: navy }
h3           { font-size: 16pt; font-weight:bold; color: #483d8b }
h4           { font-size: 14pt; font-weight:bold; color:#C71585; margin-bottom:2px; }
</style>

<!-- @SortOrder 40 -->

</head>

<body>
<h1>DotNetZip - ASP.NET Example in C#</h1>

<h2>ASP.NET Example in C#</h2>

<p>Here's an Example ASP.NET page, using C#, that dynamically creates a
zip file and saves it to Response.OutStream.  From the browser, the user
will be prompted with the familiar download dialog box, allowing Open,
Save, or Cancel of the generated zip file.</p>


<pre lang="cs" numberLines="true" outlining="true"
  title="ASP.NET example in C#">

&lt;%@ Page
    Language="C#"
    Debug="true" %&gt;

&lt;%@ Import Namespace="System.Text" %&gt;
&lt;%@ Import Namespace="System.IO" %&gt;
&lt;%@ Import Namespace="Ionic.Zip" %&gt;
&lt;%@ Import Namespace="System.Collections.Generic" %&gt;

&lt;script language="C#" runat="server"&gt;

// ZipExample.aspx
//
// This .aspx page demonstrates how to use the DotNetZip library from within ASP.NET.
//
// To run it,
//  1. drop the Ionic.Zip.dll into the \bin directory of your ASP.NET app
//  2. create a subdirectory called "fodder" in your web app directory.
//  3. copy into that directory a variety of random files.
//  4. insure your web.config is properly set up (See below)
//
//
// notes:
//  This requies the .NET Framework 3.5 - because it uses the ListView control that is
//  new for ASP.NET in the .NET Framework v3.5.
//
//  To use this control, you must add the new web controls.  Also, you must use the v3.5 compiler.
//  IF you build your app in Visual Studio, this is all done for you. If you don't use VS2008,
//  here's an example web.config that works with this aspx file:
//
//    &lt;configuration&gt;
//      &lt;system.web&gt;
//        &lt;trust level="Medium" /&gt;
//        &lt;compilation defaultLanguage="c#" /&gt;
//        &lt;pages&gt;
//          &lt;controls&gt;
//            &lt;add tagPrefix="asp" namespace="System.Web.UI.WebControls" assembly="System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31BF3856AD364E35" /&gt;
//          &lt;/controls&gt;
//        &lt;/pages&gt;
//      &lt;/system.web&gt;
//      &lt;system.codedom&gt;
//        &lt;compilers&gt;
//          &lt;compiler language="c#;cs;csharp" extension=".cs" warningLevel="4" type="Microsoft.CSharp.CSharpCodeProvider, System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"&gt;
//            &lt;providerOption name="CompilerVersion" value="v3.5" /&gt;
//            &lt;providerOption name="WarnAsError" value="false" /&gt;
//          &lt;/compiler&gt;
//        &lt;/compilers&gt;
//      &lt;/system.codedom&gt;
//    &lt;/configuration&gt;
//
//
//


public String width = "100%";

public void Page_Load (Object sender, EventArgs e)
{
    try
    {
        if ( !Page.IsPostBack ) {
            // populate the dropdownlist
            // must have a directory called "fodder" in the web app
            String homeDir = Server.MapPath(".");
            String sMappedPath= Server.MapPath("fodder");

            var fqFilenames= new List&lt;String&gt;(System.IO.Directory.GetFiles(sMappedPath));
            var filenames= fqFilenames.ConvertAll((s) =&gt; { return s.Replace(sMappedPath+"\\", ""); });

            ErrorMessage.InnerHtml = "";

            FileListView.DataSource = filenames;
            FileListView.DataBind();
        }

    }
    catch (Exception)
    {
        // Ignored
    }
}


public void btnGo_Click (Object sender, EventArgs e)
{
    ErrorMessage.InnerHtml ="";   // debugging only
    var filesToInclude= new System.Collections.Generic.List&lt;String&gt;();
    String sMappedPath= Server.MapPath("fodder");
    var source= FileListView.DataKeys as DataKeyArray ;

    foreach (var item in  FileListView.Items)
    {
        CheckBox chkbox= item.FindControl("include") as CheckBox ;
        Label lbl= item.FindControl("label") as Label ;

        if (chkbox!=null  &amp;&amp; lbl != null)
        {
            if (chkbox.Checked)
            {
                ErrorMessage.InnerHtml += String.Format("adding file: {0}&lt;br/&gt;\n", lbl.Text);

                filesToInclude.Add(System.IO.Path.Combine(sMappedPath,lbl.Text));
            }
        }
    }

    if (filesToInclude.Count==0)
    {
        ErrorMessage.InnerHtml += "You did not select any files?&lt;br/&gt;\n";

    }
    else
    {
        Response.Clear();

        System.Web.HttpContext c= System.Web.HttpContext.Current;
        String ReadmeText= String.Format("README.TXT\n\nHello!\n\n"+
                                         "This is a zip file that was dynamically generated at {0}\n"+
                                         "by an ASP.NET Page running on the machine named '{1}'.\n"+
                                         "The server type is: {2}\n",
                                         System.DateTime.Now.ToString("G"),
                                         System.Environment.MachineName,
                                         c.Request.ServerVariables["SERVER_SOFTWARE"]
                                         );
        string archiveName= String.Format("archive-{0}.zip", DateTime.Now.ToString("yyyy-MMM-dd-HHmmss"));
        Response.ContentType = "application/zip";
        Response.AddHeader("content-disposition", "filename=" + archiveName);

        using (ZipFile zip = new ZipFile())
        {
            foreach (var f in filesToInclude)
            {
                zip.AddFile(f, "files");
            }
            zip.AddEntry("Readme.txt", ReadmeText);
            zip.Save(Response.OutputStream);
        }
        Response.Close();
    }

}

&lt;/script&gt;



&lt;html&gt;
  &lt;head&gt;
    &lt;link rel="stylesheet" href="style/basic.css"&gt;
  &lt;/head&gt;

  &lt;body&gt;

    &lt;form id="Form" runat="server"&gt;

      &lt;h3&gt; &lt;span id="Title" runat="server" /&gt;Zip Files from ASP.NET &lt;/h3&gt;

      &lt;p&gt;This page uses the .NET Zip library
      (see &lt;a href="http://www.codeplex/com/DotNetZip"&gt;http://www.codeplex/com/DotNetZip&lt;/a&gt;)
       to dynamically create a zip archive, and then download it to the browser through Response.OutputStream&lt;/p&gt;

      &lt;span class="SampleTitle"&gt;&lt;b&gt;Check the boxes to select the files, then click the button to zip them up.&lt;/b&gt;&lt;/span&gt;
      &lt;br/&gt;
      &lt;br/&gt;
      &lt;asp:Button id="btnGo" Text="Zip checked files" AutoPostBack OnClick="btnGo_Click" runat="server"/&gt;

      &lt;br/&gt;
      &lt;br/&gt;
      &lt;span style="color:red" id="ErrorMessage" runat="server"/&gt;
      &lt;br/&gt;

      &lt;asp:ListView ID="FileListView" runat="server"&gt;

        &lt;LayoutTemplate&gt;
          &lt;table&gt;
            &lt;tr ID="itemPlaceholder" runat="server" /&gt;
          &lt;/table&gt;
        &lt;/LayoutTemplate&gt;

        &lt;ItemTemplate&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;asp:Checkbox ID="include" runat="server"/&gt;&lt;/td&gt;
            &lt;td&gt;&lt;asp:Label id="label" runat="server" Text="&lt;%# Container.DataItem %&gt;" /&gt;&lt;/td&gt;
          &lt;/tr&gt;
        &lt;/ItemTemplate&gt;

        &lt;EmptyDataTemplate&gt;
          &lt;div&gt;Nothing to see here...&lt;/div&gt;
        &lt;/EmptyDataTemplate&gt;

      &lt;/asp:ListView&gt;


    &lt;/form&gt;

  &lt;/body&gt;

&lt;/html&gt;

</pre>



</body>
</html>
